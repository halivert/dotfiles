snippet opciones "Opciones para peticiones"
$opciones = array(
	'http' => array(
		'method' => '$1',
		'header' => 'Cookie: ' . $_SERVER['HTTP_COOKIE']
	)
);
endsnippet

snippet array "Arreglo"
array($0);
endsnippet

snippet while "While loop"
while ($1)
{
	$0
}
endsnippet

snippet method "Method"
public function $1($2)${3:: $4}
{
	$0
}
endsnippet

snippet prop "Property"
protected \$${1:property}${2: = $3};
endsnippet

snippet item "Item of associative array"
'$1' => '${2:$1}',$0
endsnippet

snippet ctor "Constructor for php class"
public function __construct($1)
{
	$0
}
endsnippet

snippet descr "Add description to lang files"
'description' => '${1:En este lugar podrÃ¡ encontrar $0}',
endsnippet

snippet pivot:table "Pivot table for Laravel migrations"
\$table->primary(['$1', '$2']);
\$table->foreignId('$1')
	->constrained($3);
\$table->foreignId('$2')
	->constrained($4);
\$table->timestamps(${5:6});
endsnippet

snippet test "Test for phpunit"
/** @test */
public function ${2:test$3}($4)
{
	$0
}
endsnippet

snippet afun "Anonymous function" i
function ($1)${2: use ($3)} {
	$0
}
endsnippet

snippet browse "Browser test"
${1:/**
 * @test
 * @depends $2
 */}
public function ${3:test_name}()
{
	$this->browse(function (Browser $browser) {
		${4:$browser->$0}
	});
}
endsnippet

snippet screenshot "Function for dusk screenshot"
${1:->}screenshot("${2:\{$this->testPrefix\} $3}")${0:;}
endsnippet

snippet startTest "Start test for browser's"
protected $testPrefix = '$1';

/** @test */
public function initialTest()
{
	$this->artisan('migrate:fresh');

	$this->artisan('db:seed', [
		'class' => StartSeeder::class,
	]);

	${0:Area::factory()->withNewResponsible()
		->has(Process::factory()->count(3))
		->count(3)->create();}
}
endsnippet

snippet LOG "Log for laravel"
\Illuminate\Support\Facades\Log::${1:info}($0);
endsnippet
